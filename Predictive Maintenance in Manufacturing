
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

 
sensor_data = pd.read_csv('sensor_data.csv')
maintenance_logs = pd.read_csv('maintenance_logs.csv')  
failure_data = pd.read_csv('failure_data.csv')  


print(sensor_data.head())
print(maintenance_logs.head())
print(failure_data.head())

sensor_data['time_to_failure'] = failure_data['time_to_failure']
sensor_data['sensor_rolling_mean'] = sensor_data.groupby('machine_id')['sensor_value'].rolling(window=5).mean().reset_index(level=0, drop=True)


sensor_data['label'] = np.where(sensor_data['time_to_failure'] < threshold_time, 1, 0)


features = sensor_data[['sensor_rolling_mean', 'sensor_value']]
labels = sensor_data['label']

X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)


scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)


X_train_lstm = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
X_test_lstm = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))

lstm_model = Sequential()
lstm_model.add(LSTM(50, activation='relu', input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2])))
lstm_model.add(Dense(1, activation='sigmoid'))
lstm_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
lstm_model.fit(X_train_lstm, y_train, epochs=10, batch_size=32, validation_data=(X_test_lstm, y_test))
y_pred_rf = rf_model.predict(X_test)
y_pred_lstm = (lstm_model.predict(X_test_lstm) > 0.5).astype("int32")

print("Random Forest Model Metrics")
print("Precision:", precision_score(y_test, y_pred_rf))
print("Recall:", recall_score(y_test, y_pred_rf))
print("F1 Score:", f1_score(y_test, y_pred_rf))
print("Accuracy:", accuracy_score(y_test, y_pred_rf))

print("LSTM Model Metrics")
print("Precision:", precision_score(y_test, y_pred_lstm))
print("Recall:", recall_score(y_test, y_pred_lstm))
print("F1 Score:", f1_score(y_test, y_pred_lstm))
print("Accuracy:", accuracy_score(y_test, y_pred_lstm))
